name: Solar System Workflow

on:
  push:
    branches:
      - feature/*

env: 
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    strategy:
      matrix:
        node-version: [18, 20]
        operating-system: [ubuntu-latest]
    runs-on: ${{ matrix.operating-system }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js Version - ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache NPM Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm install
      
      - name: Unit Testing
        id: nodejs-unit-testing-step
        run: npm test

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Results-${{ matrix.node-version }}-${{ matrix.operating-system }}
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: node:18
    services:
      mongo:
        image: siddharth67/mongo-db:non-prod
        options: --name mongo
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache NPM Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Code Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  docker: 
    name: Containerization
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      GHCR_REPO: alves0611
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: GHCR Login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Build For Testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
      
      - name: Docker Image Test 
        run: | 
          docker images 
          docker run --name solar-system-app -d -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo "Container IP: $IP"

          echo "Testing Image URL using wget"
          wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ env.GHCR_REPO }}/solar-system:${{ github.sha }}

  dev-deploy: 
    needs: [docker]
    environment:
      name: development
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v4
        with:
          version: v1.27.4

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Fetch Kubernetes Cluster Details
        run: |
          kubectl version --client
          echo "--------------------------------" 
          kubectl get nodes

      - name: Replace Token in Manifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }} 
          K8S_IMAGE: ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

      - name: Create MongoDB Secret
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=$MONGO_URI \
            --from-literal=MONGO_USERNAME=$MONGO_USERNAME \
            --from-literal=MONGO_PASSWORD=$MONGO_PASSWORD \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

      - name: Deploy to Dev 
        run: |
          kubectl apply -f kubernetes/development

  prd-deploy: 
    needs: [dev-deploy]
    environment:
      name: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v4
        with:
          version: v1.27.4

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Fetch Kubernetes Cluster Details
        run: |
          kubectl version --client
          echo "--------------------------------" 
          kubectl get nodes

      - name: Replace Token in Manifest files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/production/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }} 
          K8S_IMAGE: ${{ secrets.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

      - name: Create MongoDB Secret
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=$MONGO_URI \
            --from-literal=MONGO_USERNAME=$MONGO_USERNAME \
            --from-literal=MONGO_PASSWORD=$MONGO_PASSWORD \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

      - name: Deploy to Prd 
        run: |
          kubectl apply -f kubernetes/production